# -*- coding:utf-8 -*-
从这里开始搭建一个基本的小说+python+nlp练习
将已有的素材进行变换得到日更量较大的小说。

* 前言：
|差别大的|差别一般的|差别小的|

|辰东的大|修真的轻松|色情|

*** 联系
通过动词和地点将 好不相关的内容组合在一起。
比如购物和，木兰你是女的吧。当然，还要避免和关键词替换发生冲突
*** 变换
小说的几个要素
要将主题和关键词、内容等进行变
| 方案                                   | 效果             | 算法要求 | 手工劳力             |
| 将差别大的内容进行无逻辑的变换，       | 最不容易被发现的 |          | 但是维护起来更麻烦。 |
|                                        |                  |          |                      |
| 其次是将一本小说进行变换，             | 容易被举报。     |          | 维护难度中等         |
|                                        |                  |          |                      |
| 足够的素材，在保留特性的情况下进行变换 |                  | 最大。   |                      |
|                                        |                  |          |                      |

* TODO 将全球高武改编成正经网文 [/]
全球高武存在很多问题，但是同样有可取之处
将全球高武改编成正经网文，替换掉各种关键之后，再补上对缺点的分析
** TODO 文本分类与标记
将我手上有的资料都跑一遍
然后对比效果选择出自己需要的那种（注意需求）
*** 简介
事实证明，直接进行关键词替换是不怎么机智的，不知道怎么替换，而且替换工作量和辨识度成直线反比，不够经济。
从这里开始搭建一个基本的小说，尝试使用更高级的手段，比如对文本进行章节段落的标记。（？聚类？分类？关键词提取）
准备两个文章：
   文章一：待处理文本，已分类好，并标记两级标题，等待处理
   文章二：文本库，可以直接复制情节

处理好的文本再进行关键词替换
*** 准备训练模型
从我的需求到模型设计

一个问题在于，层次停留在哪里？
我需要的是聚类什么？
    场所、活动
同时跑四个方案，将四个文本同时跑起来
**** 我的需求
1.句子的变换，在句子上要有差别，因此要有一个相似的句子库
2.段落章节上的要求
提炼出大纲
提炼出主要情节
提炼出主要关键词，情节，活动，人物，
| 1 | 提炼出段落主线然后替换 |
| 2 | 提炼出段落主线                    |
*** TODO 方案一：聚类[0/2]
**** TODO kmeans方案
[[file:test9.py][test9.py]] :关于文本聚类的尝试
    报错：ModuleNotFoundError: No module named 'tkinter'
        [[https://blog.csdn.net/blueheart20/article/details/78763208][尝试策略]]：
        策略：能不能避免使用？
        结果已经解决
    报错：TypeError: unsupported operand type(s) for +=: 'NoneType' and 'str'
        尝试：修改lastpage=none 为lastpage ="" 不报错了
    报错：ValueError: max_df corresponds to < documents than min_df
[[./t1_2.py]]一个简短的测试
    报错：TypeError: unsupported operand type(s) for -: 'map' and 'map'
        尝试：
    
[[./t1_1.py]] : 这里整理了一个可用代码，但是需要新建文件夹进行实验
   文件夹位置：./t1_1
**** TODO DBSCAN 方案

*** DONE 方案二：关键词提取[/]
CLOSED: [2018-12-01 六 13:48]
:LOGBOOK:  
- State "DONE"       from "TODO"       [2018-12-01 六 13:48]
:END:      
最好用表表示出来，好看
**** DONE 不如排序
CLOSED: [2018-12-01 六 11:15]
:LOGBOOK:  
- State "DONE"       from ""           [2018-12-01 六 11:15]
:END:      
[[file:t2-2.py][t2-2.py ]]  
    功能:排序成为元组，并输出
    问题：存在乱码问题:已经解决，并且不知道为什么，可能是python版本的问题。
    扩展：以后还能，用作数据处理，决定替换谁的基础
**** 使用词云进行可视化
备注：好费事，直接放弃
[[file:example.py][example.py]] :一篇例子，通过词云展示内容，需要进行学习注释分解
[[./test10.py]]
[[file:ex1.txt.html][test]] :
[[./test13.py]]
[[./test2_1.py]] :直接生成词云  
*** TODO 方案三：文本摘要
*** TODO 方案四 ：BERT 
*** TODO 句子替换方案
** TODO python文本分析
*** DONE 关键字提取test3.py+test2.py：
    CLOSED: [2018-11-29 四 11:01]
    :LOGBOOK:  
    - State "DONE"       from ""           [2018-11-29 四 11:01]
    :END:      
**** CANCELLED 方案1
     CLOSED: [2018-11-28 三 20:24]
     :LOGBOOK:  
     - State "CANCELLED"  from ""           [2018-11-28 三 20:24] \\
       报错
     :END:      
  [[file:test1.py][test1.py]] :进行分词  直接无法运行  报错：。。。无encode  疯了   python的字符真的...
  [[file:test2.py][test2.py]] ：进行统计
  即词频统计
**** DONE 方案二 test2.py
     CLOSED: [2018-11-28 三 21:56]
     :LOGBOOK:  
     - State "DONE"       from "TODO"       [2018-11-28 三 21:56]
     - State "TODO"       from "DONE"       [2018-11-28 三 20:46]
     - State "DONE"       from ""           [2018-11-28 三 20:46]
     :END:      
***** DONE 自己写一个
      CLOSED: [2018-11-28 三 21:15]
      :LOGBOOK:  
      - State "DONE"       from ""           [2018-11-28 三 21:15]
      :END:      
      [[file:test3.py][test3.py ]]
     
***** DONE 行分词
      CLOSED: [2018-11-28 三 21:15]
      :LOGBOOK:  
      - State "DONE"       from ""           [2018-11-28 三 21:15]
      :END:      

***** DONE 打开文件并分词
      CLOSED: [2018-11-28 三 21:15]
      :LOGBOOK:  
      - State "DONE"       from ""           [2018-11-28 三 21:15]
      :END:      

***** DONE 将分词写入文件
      CLOSED: [2018-11-28 三 21:15]
      :LOGBOOK:  
      - State "DONE"       from ""           [2018-11-28 三 21:15]
      :END:      
***** DONE 统计词频
      CLOSED: [2018-11-28 三 21:56]
      :LOGBOOK:  
      - State "DONE"       from ""           [2018-11-28 三 21:56]
      :END:      
以便于将前多少词进行替换
[[./test4.py]] ：一堆乱序不明的东西
[[./test5.py]] ：输出了词  其实是同词的排序 ,代码简单没有前途
[[./test6.py]] :输出了一堆乱序看不懂的东西
[[./test2.py]] :不明》 
猜测上述情况是因为
  1. split处理失败  验证后确实如此
想要引入排序，但是效果很差
打算在需要的时候，直接滤掉一定的词
最后是ok的版本
*** 关键词替换 ：替换高词频
先进行普通的操作：
然后再尝试使用python转换。
直接做字词表？比对相似度？看能不能提炼大纲（不能则成功）
   [[./test7.py ]]  1.从云端复制而来,觉得功能十分多余，放弃
   [[./test8.py]] :
       框架：
       copy文件为操作文件new
       打开文件new
       自定义字典
       读取行
       for 行 in  文件   行循环进行替换
       for 单词 in 替换组  循环进行行替换
       
*** 替换同义词
*** 彻底洗掉
*** 保留逻辑
** TODO 开始处理小说
使用pil进行替换：
替换方案如下：替换全部关键内容。对大的框架手动切换顺序
洗到彻底找不到相似处

** TODO 手动一本成熟的小说

* TODO 将一本较色情小说改编成正经网文
利用色情小说的色气
| 题目     | 地点 | 任务 | 历史环境 | 社会环境 | 卖点 | 难度 |
| 真色情   |      |      |          |          |      |      |
| 耽美     |      |      |          |          |      |      |
| 晋江     |      |      |          |          |      |      |
| 普通色情 |      |      |          |          |      |      |

** TODO python文本分析
关键字提取 关键词替换 彻底洗掉 但是保留逻辑
** TODO 开始处理小说

